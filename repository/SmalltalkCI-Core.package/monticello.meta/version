(name 'SmalltalkCI-Core-ct.297' message 'Complements SmalltalkCI-Coverage-Core-ct.34 (extension methods for coverage testing).' id '40f925fc-21b7-2249-91ea-1d83b6b7a0a1' date '29 September 2022' time '4:58:30.835693 pm' author 'ct' ancestors ((name 'SmalltalkCI-Core-EstebanLorenzano.296' message 'clean two remaining variables' id '04be3ce6-0280-0d00-bf8e-d02f0115559c' date '31 May 2021' time '4:37:18.269174 pm' author 'EstebanLorenzano' ancestors ((name 'SmalltalkCI-Core-mml.295' message 'The last couple of bytes of the UUID are fixed...Back to using Random with as little dependecy on things that might change as possible.' id 'c441f974-1f26-4555-8215-d648236d37a2' date '31 May 2021' time '1:27:22.435831 am' author 'mml' ancestors ((name 'SmalltalkCI-Core-mml.294' message 'Use the last 4 bytes of a UUID for the Travis ID.Using Random bears a great risk of breaking the code because Pharo and Squeak have (and still are) diverging strongly w.r.t. to the Random class.' id 'daaa04a2-34c1-4027-831a-05be17fa2b79' date '31 May 2021' time '1:10:22.395023 am' author 'mml' ancestors ((name 'SmalltalkCI-Core-mml.293' message 'Create Travis ID from RandomCopying 4 bytes from the beginning of a UUID can lead to clashes when the UUID is clock based and the clock hasn''t yet advanced far enough for the next generation (happens in tests).It is cleaner to generate 2 random bytes directly using Random and then produce a hexadecimal representation.' id '7b365d25-36c3-4a28-aa7e-bd03a6e2c54d' date '31 May 2021' time '12:49:43.910095 am' author 'mml' ancestors ((name 'SmalltalkCI-Core-EstebanLorenzano.292' message '- use Smalltalk dictionary to access classes that may not be in the system- remove shadowed variables' id '81a5a210-b77f-0d00-9442-20e900cb1d42' date '27 May 2021' time '10:08:52.076073 pm' author 'EstebanLorenzano' ancestors ((name 'SmalltalkCI-Core-fn.291' message 'Use `String cr` instead of `Character cr` (#521).' id '4ea49fea-a012-4d18-a006-a896368c182b' date '17 May 2021' time '10:12:25.663103 am' author 'fn' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())